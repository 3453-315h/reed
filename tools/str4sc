#!/usr/bin/env python

# Tool for converting string to instructions for pushing them to stack.
# Script works with both Python 2 and 3.
#
# Author: Oleg Mitrofanov (reider-roque) 2015

from __future__ import print_function

import binascii
import os.path as op
import sys

def hexlify(data): 
    return "".join("\\x{:02x}".format(ord(c)) for c in data)

def hexlify_nasm(data): 
    return "".join("0x{:02x},".format(ord(c)) for c in data)[:-1]

if len(sys.argv) != 2:
    script_name = op.basename(__file__)
    print("Error: wrong number of arguments")
    print("Usage: {} STRING".format(script_name))
    sys.exit(1)

strvar = sys.argv[1]

print('Bin:    {}'.format(hexlify(strvar)))
print('NASM:   {}'.format(hexlify_nasm(strvar)))
print('Hex:    {}'.format(binascii.hexlify(strvar.encode())))
print('Stack:  ', end='')

if len(strvar) % 4 != 0:
    print("Error: string length for stack must be a multiple of 4.\n" + 8*" " +
          "String length: {}. Find a way to align it".format(len(strvar)))
    sys.exit(1)
else:
    print() # Just insert a newline

strvar = strvar[::-1]   # reverse string
# divide string onto 4-letter chunks
strchunks = [strvar[i:i+4] for i in range(0, len(strvar), 4)] 
for chunk in strchunks:
    chunk = binascii.hexlify(chunk.encode()) # convert letters to byte codes
    print(8*" " + "push 0x{}".format(chunk.decode('utf-8'))) # decode(..) is needed for Python 3
